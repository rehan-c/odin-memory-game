{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CardContainer from './CardContainer';\nimport Header from './Header';\n\nfunction Game() {\n  _s();\n\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [cardsArr, addCard] = useState([]);\n\n  const handleScore = () => {\n    setScore(prevScore => prevScore + 1);\n  };\n\n  const handleHighScore = () => {\n    setHighScore(score);\n  };\n\n  const handleCard = cardName => {\n    addCard(prevArr => [...prevArr, cardName]);\n  };\n\n  const reset = () => {\n    setScore(0);\n    addCard([]);\n  };\n\n  const handleGameLogic = cardName => {\n    if (!cardsArr.includes(cardName)) {\n      handleCard(cardName);\n      handleScore();\n    } else {\n      handleHighScore();\n      reset();\n    }\n  };\n}\n\n_s(Game, \"e7/UGhXqF7PPnKs02qH5ogw/pZE=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","CardContainer","Header","Game","score","setScore","highScore","setHighScore","cardsArr","addCard","handleScore","prevScore","handleHighScore","handleCard","cardName","prevArr","reset","handleGameLogic","includes"],"sources":["/home/rehan/javascript/javascript-intermediate/react/odin-memory-game/src/components/Game.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CardContainer from './CardContainer';\nimport Header from './Header';\n\nfunction Game() {\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [cardsArr, addCard] = useState([]);\n\n    const handleScore = () => {\n        setScore((prevScore) => prevScore + 1);\n    };\n\n    const handleHighScore = () => {\n        setHighScore(score);\n    };\n\n    const handleCard = (cardName) => {\n        addCard((prevArr) => [...prevArr, cardName]);\n    };\n\n    const reset = () => {\n        setScore(0);\n        addCard([]);\n    };\n\n    const handleGameLogic = (cardName) => {\n        if (!cardsArr.includes(cardName)) {\n            handleCard(cardName);\n            handleScore();\n        } else {\n            handleHighScore();\n            reset();\n        }\n    };\n}"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,SAASC,IAAT,GAAgB;EAAA;;EACZ,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C;EACA,MAAM,CAACQ,QAAD,EAAWC,OAAX,IAAsBT,QAAQ,CAAC,EAAD,CAApC;;EAEA,MAAMU,WAAW,GAAG,MAAM;IACtBL,QAAQ,CAAEM,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAR;EACH,CAFD;;EAIA,MAAMC,eAAe,GAAG,MAAM;IAC1BL,YAAY,CAACH,KAAD,CAAZ;EACH,CAFD;;EAIA,MAAMS,UAAU,GAAIC,QAAD,IAAc;IAC7BL,OAAO,CAAEM,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAaD,QAAb,CAAd,CAAP;EACH,CAFD;;EAIA,MAAME,KAAK,GAAG,MAAM;IAChBX,QAAQ,CAAC,CAAD,CAAR;IACAI,OAAO,CAAC,EAAD,CAAP;EACH,CAHD;;EAKA,MAAMQ,eAAe,GAAIH,QAAD,IAAc;IAClC,IAAI,CAACN,QAAQ,CAACU,QAAT,CAAkBJ,QAAlB,CAAL,EAAkC;MAC9BD,UAAU,CAACC,QAAD,CAAV;MACAJ,WAAW;IACd,CAHD,MAGO;MACHE,eAAe;MACfI,KAAK;IACR;EACJ,CARD;AASH;;GA/BQb,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}